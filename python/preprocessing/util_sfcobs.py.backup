'''
Functions that can be used to manipulate WRF-NPP data
'''
import util as ut
import numpy as np

def read_wrf_npz(filename, dtype='all'):
   data = np.load(filename, mmap_mode='r')

   if dtype != 'all':
      data=data[dtype]
   
   return data

 
def read_sfc_pp(filename):
   '''
   Read lat, lon and pp form WRF-NPP file. 
   '''
   # Load data
   df = pd.read_csv(filename, na_values='NaN')
   station = df.ID.tolist()
   lon = df.LON.to_numpy()
   lat = df.LAT.to_numpy()
   pp = df.ACUM.to_numpy()

   return station, lat, lon, pp

def sfc_2_wrf(data, from_grid, to_grid):
   '''
   Interpolate WRF data to IMERG lat/lon grid using an inverse distance weight function
   '''
   from scipy.interpolate import griddata
   from scipy.ndimage.filters import gaussian_filter

   interp = griddata((from_grid[0], from_grid[1]), data, (to_grid[0], to_grid[1], method='linear')
   interp = gaussian_filter(temp_interp, 1.2)
 
   return interp 


def get_param_mems(ensemble):
    '''
    Basado en la configuracion del RRA donde hay 9 grupos de parametrizaciones.
    Se descartan los ultimos 6 miembros para que cada grupo tenga la misma cantidad de miembros
    '''
    nmem = ensemble.shape[0]-6
    out = dict()
    tmp = np.zeros((9, int(nmem/9), ensemble.shape[1], ensemble.shape[2]))
    igroup = 0
    newmem = 0
    for imem in range(nmem):
        tmp[igroup, newmem ,  :, :] = ensemble[imem, :, :]

        if imem == 8 or imem == 17 or imem == 26 or imem == 35 or imem == 44 :
            igroup = 0
            newmem += 1 
        else:
            igroup += 1

    for igroup in range(9):
       group = str(igroup).zfill(2)
       out[group] = tmp[igroup, :, :, :]

    return out


